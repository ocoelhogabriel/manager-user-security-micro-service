services:
  postgres:
    image: postgres:16
    container_name: postgres
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=company_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - micro-network
    # Healthcheck para o banco de dados
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d company_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.10-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - micro-network

  config-server:
    build:
      context: ./infra/config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - micro-network
    # Healthcheck para o Config Server (espera a porta 8888 estar acessível)
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 12 # Tenta por até 2 minutos

  eureka-server:
    build:
      context: ./infra/eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - micro-network
    # Agora, depende da SAÚDE do config-server
    depends_on:
      config-server:
        condition: service_healthy

  micro-company:
    build:
      context: ./micro-company
    container_name: micro-company
    ports:
      - "8081:8081"
    networks:
      - micro-network
    # Agora, depende da SAÚDE dos outros serviços
    depends_on:
      postgres:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka-server:
        # Eureka não precisa de healthcheck aqui, pois já depende do config-server
        condition: service_started

volumes:
  postgres_data:

networks:
  micro-network:
    driver: bridge